#! /usr/bin/env python

"""
Implementation of the SFF (Service Function Forwarder).
Receives an SFC ID and create links between each of the chains' VNFs.
"""

import requests
import sys, time
from eve import Eve
from flask import request, jsonify
from socket import *

app = Eve()

VNF_URL = 'http://0.0.0.0:9001/vnf/'
SFC_URL = 'http://0.0.0.0:9002/sfc/'

port = 10000
count = 10000
BUFSIZE = 8192

@app.route('/sff/run', methods=['POST'])
def create_sfp():
    """Create a new Service Function Path (SFP) based on SFC ID.
    Also send <rounds> traffic through the SFC.
    If stats is specified, pre-load those stats into performance metrics.
    """

    sfc_id = request.json['id']
    rounds = request.json['rounds']
    stats = request.json['stats']

    if rounds <= 0:
        return "error: rounds should be higher than 0!"

    if not stats:
        stats = {
            'throughput': [],
            'latency_per_packet': []
        }

    r = requests.get(SFC_URL + 'show', json={'sfc_id': sfc_id})
    chain = r.json()['chain']

    # send traffic through SFC and compute throughput
    for i in range(rounds):
        # Create links between each VNF of the chain
        sfp = [] # SFP
        for vnf in chain:
            r = requests.get(VNF_URL + 'show', json={'vnf_id': vnf})
            vnf_host = r.json()['ip']

            vnf_conn = socket(AF_INET, SOCK_STREAM)
            vnf_conn.connect((vnf_host, port))

            sfp.append(vnf_conn)

            vnf_conn = None

        # create packet payload
        data = "x" * (BUFSIZE-1) + "\n"

        """ -> this code was used to measure average throughput
        #Starts measuring the time for the packets to traverse the entire SFC chain
        t1 = time.time()

        # Perform the SFP forwarding
        for vnf in sfp:
            for i in range(count):
                vnf.send(data)
                data = vnf.recv(BUFSIZE)

            vnf.shutdown(1)

        t2 = time.time()
        """


        # Perform the SFP forwarding
        for i in range(count):
            t1 = time.time()
            for vnf in sfp:
                vnf.send(data)
                data = vnf.recv(BUFSIZE)
            t2 = time.time()
            lat = (t2-t1)*1000000
            stats['latency_per_packet'].append(lat)
        return jsonify(stats)

        """ -> this code was used to measure throughput per second.
        init = time.time()
        buffer = 8
        counter = 0
        r = 0
        while True:
            for vnf in sfp:
                vnf.send(data)
                counter += 1
                data = vnf.recv(BUFSIZE)
                current_timestamp = time.time() - init

                if current_timestamp >= 1:
                    current_throughput = ((counter*BUFSIZE*0.001)/1000)*8
                    print current_timestamp, current_throughput
                    stats['throughput'].append(current_throughput)
                    init = time.time()
                    counter = 0
                    r += 1
                    if r > rounds:
                        return jsonify(stats)
        """

        # Compute SFC throughput
        throughput_KB = round((BUFSIZE*count*0.001) / (t2 - t1), 3) # KB/s
        throughput_MB = throughput_KB/1000                          # MB/s
        throughput_GB = throughput_MB/1000                          # GB/s

        throughput_Kb = int(throughput_KB * 8)                      # Kb/s
        throughput_Mb = int(throughput_MB * 8)                      # Mb/s
        throughput_Gb = int(throughput_GB * 8)                      # Gb/s

        stats['throughput'].append(throughput_Mb)

    return jsonify(stats)

@app.route('/sff/alarm', methods=['POST'])
def failure_alarm():
    """Request generated by NHAM if a failure was found.
    Store partial metrics and suspend the current SFP.
    """

    sfc_id = request.json['id']

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9004)
